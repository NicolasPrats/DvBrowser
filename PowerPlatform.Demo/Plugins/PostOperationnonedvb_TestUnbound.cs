// <copyright file="PostOperationnonenew_TestUnbound.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author></author>
// <date>26-May-23 19:18:54</date>
// <summary>Implements the PostOperationnonenew_TestUnbound Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace PowerPlatform.Demo.Plugins
{

    /// <summary>
    /// PostOperationnonenew_TestUnbound Plugin.
    /// </summary>    
    public class PostOperationnonedvb_TestUnbound: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationnonedvb_TestUnbound"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PostOperationnonedvb_TestUnbound(string unsecure, string secure)
            : base(typeof(PostOperationnonedvb_TestUnbound))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(localContext));
            }           
            // Obtain the tracing service
            ITracingService tracingService = localContext.TracingService;

            try
            { 
                // Obtain the execution context from the service provider.  
                IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

                // Obtain the organization service reference for web service calls.  
                IOrganizationService currentUserService = localContext.CurrentUserService;

                // TODO: Implement your custom Plug-in business logic.
                var outputParameters = localContext.PluginExecutionContext.OutputParameters;
                //outputParameters["outputbool"] = false;
                QueryExpression query = new QueryExpression("systemuser");
                query.TopCount = 2;
                query.ColumnSet = new ColumnSet(true);
                var collection = currentUserService.RetrieveMultiple(query);
                Entity record = collection.Entities.First();
                switch (context.MessageName)
                {
                    case "dvb_Unbound_2ResponseWhose1Entity":
                        outputParameters["Unbound_2ResponseWhose1Entity_Entity"] = record;
                        outputParameters["Unbound_2ResponseWhose1Entity_Resp_Bool"] = true;
                        break;
                    case "dvb_Unbound_1ResponseEntity":
                        outputParameters["dvb_Unbound_1ResponseEntity_Resp_Entity"] = record;
                            break;
                    case "dvb_Unbound_1ResponseEntityReference":
                        outputParameters["Unbound_1ResponseEntityReference_Resp_EntityRef"] = record.ToEntityReference();
                        break;
                    case "dvb_Unbound_1ResponseCollection":
                        outputParameters["dvb_Unbound_1ResponseCollection_Resp_Coll"] = collection;
                        break;
                    case "dvb_Unbound_AllRequestsAllResponses":
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_Bool"] = true;
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_Coll"] = collection;
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_Datetime"] = new DateTime(2000,01,01);
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_Decimal"] = 1234m;
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_entity"] = record;
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_EntityRef"] = record.ToEntityReference();
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_float"] = 1234.56;
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_int"] = 123;
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_Money"] = new Money(123);
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_picklist"] = new OptionSetValue(1);
                        outputParameters["Unbound_AllRequestsAllResponses_Resp_string"] = "abc";
                        break;
                }
            }	
            // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
            catch (Exception ex)
            {
                tracingService?.Trace("An error occurred executing Plugin PowerPlatform.Demo.Plugins.PostOperationnonenew_TestUnbound : {0}", ex.ToString());
                throw new InvalidPluginExecutionException("An error occurred executing Plugin PowerPlatform.Demo.Plugins.PostOperationnonenew_TestUnbound .", ex);
            }	
        }
    }
}
